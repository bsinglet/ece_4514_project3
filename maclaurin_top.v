// File        : maclaurin_top.v
// Author      : P. Athanas
// Date        : 8/28/16
// Version     : 2.2
// Description : This is the top-level model of the 'maclaurin_box' design.  This
//               instances the user's solver and I/O for
//               monitoring the results.
//               ---------------------
//               DO NOT EDIT THIS FILE
//               ---------------------

module maclaurin_top ( 
   input               clock_50,   // 50 MHz free-running clock
   input               clr_n,      // One of the four push-buttons on the DE2
   input        [17:0] switch,     // The 18 slide switches
   output       [17:0] ledred,     // The 18 red LEDs on the DE2
   output       [8:0]  ledgreen    // The 9 green LEDs on the DE2
);
   // Wire declarations
	wire [31:0] x;          // Input of logarithm: x
	wire [31:0] ln;         // Logarithm output
   wire start;             // Asserted to start the computation
   wire done;              // True when the computation is in progress
   wire ln_error;          // Asserted by maclaurin_box if the input > 1
	
	reg [31:0] count;
	//-------------------------THIS IS YOUR SOLVER SOLUTION
	maclaurin_box u0 (
		.clk_clk       (clock_50),         //   clk.clk
		.reset_reset_n (clr_n),          // reset.reset_n
		.x_export      (x),                //     x.export -- input
		.start_export  (start),            // start.export -- inputvi
		.ln_export     (ln),               // root1.export-- output
		.status_export ({done, ln_error})  //  status.export-- output
   );
   //----------------------------------------------------
   //
   //-------------------------THIS IS THE MONITOR PROCESSOR
	log_mon u1 (
		.clk            (clock_50),    //     clk
		.reset_n        (clr_n),     // reset_n
		.ln             (ln),          //   ln
		.start          (start),     //  start
		.status         ( {done, ln_error} ),  //  status
		.x              (x)           //       x
	);
   //----------------------------------------------------
   // Handshake signals
   //assign ledgreen[0] = done;
   assign ledred[0] = ln_error;
	always@(posedge clock_50) begin
	   if (clr_n == 0) count <= 0;
		else count <= count + 1;
	end
	assign ledred[17:1] = count[31:14];
	assign ledgreen = ln[8:0];
endmodule
